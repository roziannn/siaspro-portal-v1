generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model event {
  id               Int                @id @default(autoincrement())
  jenis            String
  nama             String
  tanggal          DateTime
  lokasi           String
  kuota            Int
  totalJoin        Int                @default(0)
  status           event_status       @default(OPEN)
  createdById      Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  user             user               @relation(fields: [createdById], references: [id], map: "Event_createdById_fkey")
  eventparticipant eventparticipant[]

  @@index([createdById], map: "Event_createdById_idx")
}

model eventparticipant {
  id       Int      @id @default(autoincrement())
  eventId  Int
  userId   Int
  joinedAt DateTime @default(now())
  event    event    @relation(fields: [eventId], references: [id], map: "EventParticipant_eventId_fkey")
  user     user     @relation(fields: [userId], references: [id], map: "EventParticipant_userId_fkey")

  @@unique([eventId, userId], map: "EventParticipant_eventId_userId_key")
  @@index([eventId], map: "EventParticipant_eventId_idx")
  @@index([userId], map: "EventParticipant_userId_idx")
}

model jadwalkuliah {
  id                                  Int       @id
  mataKuliah                          String
  dosen                               String
  ruangan                             String
  hari                                String
  jamMulai                            String
  jamSelesai                          String
  aktif                               Boolean   @default(true)
  createdAt                           DateTime  @default(now())
  updatedAt                           DateTime?
  createdById                         Int
  updatedById                         Int?
  user_jadwalkuliah_createdByIdTouser user      @relation("jadwalkuliah_createdByIdTouser", fields: [createdById], references: [id], map: "JadwalKuliah_createdById_fkey")
  user_jadwalkuliah_updatedByIdTouser user?     @relation("jadwalkuliah_updatedByIdTouser", fields: [updatedById], references: [id], onDelete: Restrict, map: "JadwalKuliah_updatedById_fkey")

  @@index([createdById], map: "JadwalKuliah_createdById_idx")
  @@index([updatedById], map: "JadwalKuliah_updatedById_idx")
}

model role {
  id       Int        @id @default(autoincrement())
  name     String     @unique(map: "Role_name_key")
  userrole userrole[]
}

model user {
  id                                          Int                @id @default(autoincrement())
  email                                       String             @unique(map: "User_email_key")
  password                                    String
  name                                        String?
  isActive                                    Boolean?
  createdAt                                   DateTime           @default(now())
  event                                       event[]
  eventparticipant                            eventparticipant[]
  jadwalkuliah_jadwalkuliah_createdByIdTouser jadwalkuliah[]     @relation("jadwalkuliah_createdByIdTouser")
  jadwalkuliah_jadwalkuliah_updatedByIdTouser jadwalkuliah[]     @relation("jadwalkuliah_updatedByIdTouser")
  userrole                                    userrole[]
}

model userrole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  role   role @relation(fields: [roleId], references: [id], map: "UserRole_roleId_fkey")
  user   user @relation(fields: [userId], references: [id], map: "UserRole_userId_fkey")

  @@unique([userId, roleId], map: "UserRole_userId_roleId_key")
  @@index([roleId], map: "UserRole_roleId_fkey")
}

enum event_status {
  OPEN
  ONGOING
  CLOSED
}
